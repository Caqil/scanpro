apiVersion: v1
kind: Secret
metadata:
  name: scanpro-db-credentials
  namespace: scanpro
type: Opaque
data:
  # Base64 encoded values (change these!)
  # Default values:
  # - username: scanpro
  # - password: scanpro-pw-change-me
  # - database: scanprodb
  username: c2NhbnBybw==
  password: c2NhbnByby1wdy1jaGFuZ2UtbWU=
  database: c2NhbnByb2Ri
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: scanpro-db-config
  namespace: scanpro
data:
  postgresql.conf: |
    max_connections = 100
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 5242kB
    min_wal_size = 1GB
    max_wal_size = 4GB
  pg_hba.conf: |
    local   all             postgres                                peer
    local   all             all                                     md5
    host    all             all             127.0.0.1/32            md5
    host    all             all             ::1/128                 md5
    host    all             all             0.0.0.0/0               md5
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: scanpro-postgresql
  namespace: scanpro
  labels:
    app: scanpro
    tier: database
spec:
  serviceName: "scanpro-postgresql"
  replicas: 1
  selector:
    matchLabels:
      app: scanpro
      tier: database
  template:
    metadata:
      labels:
        app: scanpro
        tier: database
    spec:
      containers:
        - name: postgresql
          image: postgres:14-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
              name: postgresql
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: scanpro-db-credentials
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: scanpro-db-credentials
                  key: password
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: scanpro-db-credentials
                  key: database
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/postgresql/data
            - name: postgresql-config
              mountPath: /etc/postgresql
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - "$(POSTGRES_USER)"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - "$(POSTGRES_USER)"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
      volumes:
        - name: postgresql-config
          configMap:
            name: scanpro-db-config
  volumeClaimTemplates:
    - metadata:
        name: postgresql-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: "scanpro-local-storage"
        resources:
          requests:
            storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: scanpro-postgresql
  namespace: scanpro
  labels:
    app: scanpro
    tier: database
spec:
  ports:
    - port: 5432
      targetPort: 5432
      name: postgresql
  selector:
    app: scanpro
    tier: database
  type: ClusterIP
---
apiVersion: batch/v1
kind: Job
metadata:
  name: scanpro-db-init
  namespace: scanpro
spec:
  ttlSecondsAfterFinished: 100
  template:
    spec:
      containers:
        - name: psql-client
          image: postgres:14-alpine
          command:
            - /bin/bash
            - -c
            - |
              # Wait for PostgreSQL to be ready
              until pg_isready -h scanpro-postgresql -U $(PGUSER); do
                echo "Waiting for database to be ready..."
                sleep 2
              done

              # Run initialization scripts
              psql -h scanpro-postgresql -U $(PGUSER) -d $(PGDATABASE) -c "
              -- Create extensions
              CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";

              -- Create schema if not exists (for better organization)
              CREATE SCHEMA IF NOT EXISTS scanpro;

              -- Create necessary tables
              CREATE TABLE IF NOT EXISTS scanpro.users (
                id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
                name TEXT,
                email TEXT UNIQUE NOT NULL,
                password TEXT,
                role TEXT DEFAULT 'user',
                email_verified BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
              );

              CREATE TABLE IF NOT EXISTS scanpro.subscriptions (
                id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
                user_id UUID UNIQUE NOT NULL REFERENCES scanpro.users(id) ON DELETE CASCADE,
                tier TEXT DEFAULT 'free',
                status TEXT DEFAULT 'active',
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                canceled_at TIMESTAMP WITH TIME ZONE,
                current_period_end TIMESTAMP WITH TIME ZONE,
                current_period_start TIMESTAMP WITH TIME ZONE,
                paypal_plan_id TEXT,
                paypal_subscription_id TEXT UNIQUE
              );

              CREATE TABLE IF NOT EXISTS scanpro.api_keys (
                id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
                user_id UUID NOT NULL REFERENCES scanpro.users(id) ON DELETE CASCADE,
                name TEXT NOT NULL,
                key TEXT UNIQUE NOT NULL,
                permissions TEXT[],
                last_used TIMESTAMP WITH TIME ZONE,
                expires_at TIMESTAMP WITH TIME ZONE,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
              );

              CREATE TABLE IF NOT EXISTS scanpro.usage_stats (
                id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
                user_id UUID NOT NULL REFERENCES scanpro.users(id) ON DELETE CASCADE,
                operation TEXT NOT NULL,
                count INTEGER DEFAULT 0,
                date DATE NOT NULL,
                UNIQUE(user_id, operation, date)
              );

              -- Create indexes
              CREATE INDEX IF NOT EXISTS idx_users_email ON scanpro.users(email);
              CREATE INDEX IF NOT EXISTS idx_api_keys_user_id ON scanpro.api_keys(user_id);
              CREATE INDEX IF NOT EXISTS idx_usage_stats_user_id ON scanpro.usage_stats(user_id);
              CREATE INDEX IF NOT EXISTS idx_usage_stats_date ON scanpro.usage_stats(date);

              -- Insert initial admin user if doesn't exist
              INSERT INTO scanpro.users (name, email, password, role)
              VALUES ('Admin', 'admin@example.com', '\$2b\$10\$JTJf6/hB3kKx/vdvv89GOeZBQ2Xv4ax2C5qZybAZVLBfCQpS8XmJe', 'admin')
              ON CONFLICT (email) DO NOTHING;
              "
          env:
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: scanpro-db-credentials
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: scanpro-db-credentials
                  key: password
            - name: PGDATABASE
              valueFrom:
                secretKeyRef:
                  name: scanpro-db-credentials
                  key: database
      restartPolicy: OnFailure
